@startuml
'https://plantuml.com/class-diagram

'----- Entities -----
class Account
class FileRequirements {
    - int id;
    - char[] forbiddenSymbols_Title;
    - int charMaxLength_Title;
    - double fileSizeBytes;
    - Set<String> fileExtensionsAllowed;
}
class FileData {
    - int id;
    - String folder_path;
    - Folder parentFolder;
    - String name;
    - string fileType;
}
class Role {
    - int id;
    - String name
    - Set<Folder> folders
    - Set<SubRole> subRoles
    + addSubFolder(Folder subFolder)
    + addSubRole(SubRole subRole)
    + removeSubFolder(Folder subFolder)
    + removeSubRole(SubRole subRole)
}
class SubRole {
    - int id
    - Set<Folder> folders
    - String name
    - Role role
    + addFolder(Folder folder)
}
class PermissionMatrixSettings {
    - int id
    - SubRole subRole
    - Permissions permissions
    - Folder folder
    - Role role
}
class Permissions {
    - int id
    - boolean read
    - boolean write
    - boolean delete
}

class Folder {
    - int id
    - String name
    - Set<File> files
    - Set<Folder> subFolders
    - Folder parentFolder
    - Set<SubRole> subRoles
    - Set<PermissionMatrixSettings> permissionMatrixSettings
    + addFile(File file)
    + addSubFolder(Folder subFolder)
    + addSubRole(SubRole subRole)
    + addRole(Role role)
    + addPermissionMatrixSettings(PermissionMatrixSettings permissionMatrixSettings)
    + removeFile(File file)
    + removeSubFolder(Folder subFolder)
}
class UserChangesLogEntry {
    - int id
    - String updatedUser
    - String title
    - String description
    - LocalDate date
    - String accountEditor
}
enum SystemRole {
    USER
    COMPANY MANAGER
}

'----- Controllers -----
class AccountController
class FileController { 
    **NOT YET IMPLEMENTED()**
    + uploadFile(File file, int folderId)
    + downloadFile(int fileId)
    + renameFile(int fileId, String newName)
    + moveFile(int fileId, int folderId)

    **IMPLEMENTED(why dao as parameter)**
    + convertToDTO(FileData file)
    + getAllBytTypeInPath(FileDAO dao)
    + delete(FileDAO dao)
    + getById(FileDAO dao)
}
class FolderController
class NotificationController

'----- DAOs -----
class FileDAO
class LogDAO
class AccountDAO
class FolderDAO {
    + permissions getPermissions(long folderId, long subRoleId)
}

class FileValidator {
    - FileRequirements
    + validateFile(FileRequirements fileRequirements)
    + validateExtension(File file)
    + validateTitleLength(String name)
    - getTitleLengthWithoutExtension(String name)
    + validateFileSize(File file)
    + validateFileSymbols(String name)

}

'List <|-- AbstractList
'Collection <|-- AbstractCollection

'Collection <|- List
'AbstractCollection <|- AbstractList
'AbstractList <|-- ArrayList

class Account {
    - String example
    + methodExample()
}

'----- Relations -----
Folder "1" *-- "0..*" FileData
Folder "1" *-- "0..*" Folder
Folder "1" *-- "0..*" Role
Folder "1" *-- "0..*" PermissionMatrixSettings
Role "1" *-- "0..*" SubRole
PermissionMatrixSettings "1" *-- "0..*" Permissions
PermissionMatrixSettings "1" *-- "0..*" SubRole


!pragma layout smetana
@enduml